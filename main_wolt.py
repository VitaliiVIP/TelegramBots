import logging
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery

# –¢–≤–æ–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = "8166513060:AAFZDAy1MBeYgkDpQVU56zEsmdN01ooft1k"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def start_handler(message: Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="Start", callback_data="start")]
    ])
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.", reply_markup=keyboard)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ Start
@dp.callback_query(lambda c: c.data == "start")
async def process_start(callback_query: CallbackQuery):
    user_data[callback_query.from_user.id] = {}
    await bot.send_message(callback_query.from_user.id, "–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?")
    await callback_query.answer()


# –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏
@dp.message(lambda message: message.from_user.id in user_data and "name" not in user_data[message.from_user.id])
async def get_name(message: Message):
    user_data[message.from_user.id]["name"] = message.text
    await message.answer("–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç?")


# –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
@dp.message(lambda message: message.from_user.id in user_data and "city" not in user_data[message.from_user.id])
async def get_city(message: Message):
    user_data[message.from_user.id]["city"] = message.text
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üöó –ú–∞—à–∏–Ω–∞", callback_data="transport_car")],
        [InlineKeyboardButton(text="üö≤ –í–µ–ª–æ—Å–∏–ø–µ–¥", callback_data="transport_bike")],
        [InlineKeyboardButton(text="üöóüö≤ –ò —Ç–æ, –∏ —Ç–æ", callback_data="transport_both")]
    ])
    await message.answer("–ù–∞ –∫–∞–∫–æ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ –≤—ã –≥–æ—Ç–æ–≤—ã —Ä–∞–±–æ—Ç–∞—Ç—å?", reply_markup=keyboard)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
@dp.callback_query(lambda c: c.data in ["transport_car", "transport_bike", "transport_both"])
async def process_transport(callback_query: CallbackQuery):
    user_data[callback_query.from_user.id]["transport"] = callback_query.data
    await bot.send_message(callback_query.from_user.id, "–û—Ç–∫—É–¥–∞ –≤—ã —Ä–æ–¥–æ–º?")
    await callback_query.answer()


# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã
@dp.message(lambda message: message.from_user.id in user_data and "country" not in user_data[message.from_user.id])
async def get_country(message: Message):
    user_data[message.from_user.id]["country"] = message.text
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="business_yes")],
        [InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="business_no")],
        [InlineKeyboardButton(text="ü§∑‚Äç‚ôÇÔ∏è –Ø –Ω–µ –∑–Ω–∞—é", callback_data="business_unknown")]
    ])
    await message.answer("–£ –≤–∞—Å –µ—Å—Ç—å –±–∏–∑–Ω–µ—Å ID?", reply_markup=keyboard)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∏–∑–Ω–µ—Å ID
@dp.callback_query(lambda c: c.data in ["business_yes", "business_no", "business_unknown"])
async def process_business_id(callback_query: CallbackQuery):
    if callback_query.data == "business_unknown":
        await bot.send_message(callback_query.from_user.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ Truster.fi.")

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="I've read", callback_data="read_instructions")]
    ])
    await bot.send_message(callback_query.from_user.id, "<b>Here is the instruction.\n READ IT CAREFULLY!</b>\n\nSince we started our group we connected 6 accounts and now our group is growing, and we decided to make an Instruction for new people:\n\n<b>1.</b> We are the group that connects people who are looking for the account with owners.\n\n<b>2.</b> We take fixable amount from each account every month. Depends on the location of the account we take 50-99 euros (sum is already included in written cost).\n\n3. Since we start our group few people decided to trick us and not pay any money after getting the account. This people lost access to the accounts, because we contacted owners. So we decided to take 0.01‚Ç¨ for getting all your personal information (When you send it in Bank app or MobilePay, we see your account's details).\n\n4. In the end of the first workday you must pay 20‚Ç¨ as a guarantee, that you will pay to us further.\n\nWe hoping on nice partnership with you üòä",
                           parse_mode='HTML', reply_markup=keyboard)
    await callback_query.answer()


# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–æ—á—Ç–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–æ—á—Ç–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–æ—á—Ç–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
@dp.callback_query(lambda c: c.data == "read_instructions")
async def process_read(callback_query: CallbackQuery):
    username = callback_query.from_user.username
    user_id = callback_query.from_user.id
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id in user_data:
        data = user_data[user_id]
        name = data.get("name", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
        city = data.get("city", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
        transport = data.get("transport", "–ù–µ —É–∫–∞–∑–∞–Ω–æ").replace("transport_", "").capitalize()
        country = data.get("country", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –≤–∫–ª—é—á–∞—è Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        message_text = (f"–ò–º—è: {name}\n"
                        f"City: {city}\n"
                        f"Vehicle Type: {transport}\n"
                        f"Country: {country}\n"
                        f"Telegram ID: @{username if username else 'X'}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
        group_chat_id = '@ushdhdhdisj52'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à—É –≥—Ä—É–ø–ø—É
        await bot.send_message(group_chat_id, message_text)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    await bot.send_message(user_id, "Managers got your information!\n\nContact one of them: @wolt_ac, @johnywellman")
    await callback_query.answer()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())