import os
import telebot
from telebot import types
from googletrans import Translator, LANGUAGES

BOT_TOKEN = '7021310891:AAFCULpbm3uN39sXW5km20X-91T4ycOf3kg'
bot = telebot.TeleBot(BOT_TOKEN)
translator = Translator()
facts = [
    "Fact 1: The most widely spoken language in the world is English.",
    "Fact 2: There are over 7,000 languages spoken in the world today.",
    "Fact 3: The oldest written language was Sumerian.",
]
subscribed_users={}

user_language_choices = {}
user_source_language_choices = {}

@bot.message_handler(commands=['start', 'hello'])
def send_welcome(message):
        markup = types.ReplyKeyboardMarkup(row_width=2, one_time_keyboard=True)  # one_time_keyboard=True makes the keyboard disappear after use
        # Replace these with the flags or options you want to provide
        flag1 = types.KeyboardButton("ğŸ‡¬ğŸ‡§ United\nKingdom")
        flag2 = types.KeyboardButton("ğŸ‡«ğŸ‡· France")
        flag3 = types.KeyboardButton("ğŸ‡©ğŸ‡ª Germany")
        flag4 = types.KeyboardButton("ğŸ‡«ğŸ‡® Finland")
        flag5 = types.KeyboardButton("ğŸ‡ªğŸ‡¸ Spain")
        flag6 = types.KeyboardButton("ğŸ‡®ğŸ‡³ India")
        flag7 = types.KeyboardButton("ğŸ‡®ğŸ‡¹ Italy")
        flag8 = types.KeyboardButton("ğŸ‡¯ğŸ‡µ Japan")
        flag9 = types.KeyboardButton("ğŸ‡°ğŸ‡· South Korea")
        flag10 = types.KeyboardButton("ğŸ‡¸ğŸ‡ª Sweden")
        flag11 = types.KeyboardButton("ğŸ‡·ğŸ‡´ Romania")
        flag12 = types.KeyboardButton("ğŸ‡»ğŸ‡³ Vietnam")
        flag13 = types.KeyboardButton("ğŸ‡ºğŸ‡¦ Ukraine")
        flag14 = types.KeyboardButton("ğŸ‡¨ğŸ‡³ China")
        flag15 = types.KeyboardButton("ğŸ‡·ğŸ‡º Russia")
        flag16 = types.KeyboardButton("ğŸ‡±ğŸ‡¹ Lithuania")
        flag17 = types.KeyboardButton("ğŸ‡­ğŸ‡· Croatia")
        flag18 = types.KeyboardButton("ğŸ‡§ğŸ‡¾ Belarus")
        flag19 = types.KeyboardButton("ğŸ‡ªğŸ‡ª Estonia")
        flag20 = types.KeyboardButton("ğŸ‡±ğŸ‡» Latvia")
        flag21 = types.KeyboardButton("ğŸ‡°ğŸ‡¿ Kazahstan")
        flag22 = types.KeyboardButton("ğŸ‡¬ğŸ‡· Greece")
        markup.add(flag1, flag2, flag3, flag4, flag5, flag6, flag7, flag8, flag9, flag10, flag11, flag12, flag13, flag14, flag15, flag16, flag17, flag18, flag19, flag20, flag22, flag21)
        user_first_name = message.from_user.first_name
        bot.send_message(message.chat.id, f"Hello, <b>{user_first_name}</b>, I am Bot-Translator! Please, choose the language (use menu).\nYou can use any language as source and switch between destination languages when you want.", reply_markup=markup, parse_mode="HTML")
@bot.message_handler(commands=['speclang'])
def specify(message):
        markup = types.ReplyKeyboardMarkup(row_width=2, one_time_keyboard=True)  # one_time_keyboard=True makes the keyboard disappear after use
        flag1 = types.KeyboardButton("ğŸ‡¬ğŸ‡§ United\nKingdom")
        flag2 = types.KeyboardButton("ğŸ‡«ğŸ‡· France")
        flag3 = types.KeyboardButton("ğŸ‡©ğŸ‡ª Germany")
        flag4 = types.KeyboardButton("ğŸ‡«ğŸ‡® Finland")
        flag5 = types.KeyboardButton("ğŸ‡ªğŸ‡¸ Spain")
        flag6 = types.KeyboardButton("ğŸ‡®ğŸ‡³ India")
        flag7 = types.KeyboardButton("ğŸ‡®ğŸ‡¹ Italy")
        flag8 = types.KeyboardButton("ğŸ‡¯ğŸ‡µ Japan")
        flag9 = types.KeyboardButton("ğŸ‡°ğŸ‡· South Korea")
        flag10 = types.KeyboardButton("ğŸ‡¸ğŸ‡ª Sweden")
        flag11 = types.KeyboardButton("ğŸ‡·ğŸ‡´ Romania")
        flag12 = types.KeyboardButton("ğŸ‡»ğŸ‡³ Vietnam")
        flag13 = types.KeyboardButton("ğŸ‡ºğŸ‡¦ Ukraine")
        flag14 = types.KeyboardButton("ğŸ‡¨ğŸ‡³ China")
        flag15 = types.KeyboardButton("ğŸ‡·ğŸ‡º Russia")
        flag16 = types.KeyboardButton("ğŸ‡±ğŸ‡¹ Lithuania")
        flag17 = types.KeyboardButton("ğŸ‡­ğŸ‡· Croatia")
        flag18 = types.KeyboardButton("ğŸ‡§ğŸ‡¾ Belarus")
        flag19 = types.KeyboardButton("ğŸ‡ªğŸ‡ª Estonia")
        flag20 = types.KeyboardButton("ğŸ‡±ğŸ‡» Latvia")
        flag21 = types.KeyboardButton("ğŸ‡°ğŸ‡¿ Kazahstan")
        flag22 = types.KeyboardButton("ğŸ‡¬ğŸ‡· Greece")
        markup.add(flag1, flag2, flag3, flag4, flag5, flag6, flag7, flag8, flag9, flag10, flag11, flag12, flag13, flag14, flag15, flag16, flag17, flag18, flag19, flag20, flag21, flag22)

@bot.message_handler(func=lambda message: True)
def translate_message(message):
    chat_id = message.chat.id
    if message.text in ["ğŸ‡¬ğŸ‡§ United\nKingdom", "ğŸ‡«ğŸ‡· France", "ğŸ‡©ğŸ‡ª Germany", "ğŸ‡«ğŸ‡® Finland", "ğŸ‡ªğŸ‡¸ Spain", "ğŸ‡®ğŸ‡³ India", "ğŸ‡®ğŸ‡¹ Italy", "ğŸ‡¯ğŸ‡µ Japan", "ğŸ‡°ğŸ‡· South Korea", "ğŸ‡¸ğŸ‡ª Sweden", "ğŸ‡·ğŸ‡´ Romania", "ğŸ‡»ğŸ‡³ Vietnam", "ğŸ‡ºğŸ‡¦ Ukraine", "ğŸ‡¨ğŸ‡³ China", "ğŸ‡±ğŸ‡¹ Lithuania", "ğŸ‡·ğŸ‡º Russia", "ğŸ‡­ğŸ‡· Croatia", "ğŸ‡§ğŸ‡¾ Belarus", "ğŸ‡ªğŸ‡ª Estonia", "ğŸ‡±ğŸ‡» Latvia", "ğŸ‡°ğŸ‡¿ Kazahstan", "ğŸ‡¬ğŸ‡· Greece"]:
        # Map the flag to a language code
        flag_to_lang = {"ğŸ‡¬ğŸ‡§ United\nKingdom": "en", "ğŸ‡«ğŸ‡· France": "fr", "ğŸ‡©ğŸ‡ª Germany": "de", "ğŸ‡«ğŸ‡® Finland": "fi", "ğŸ‡ªğŸ‡¸ Spain": "es", "ğŸ‡®ğŸ‡³ India" : "hi", "ğŸ‡®ğŸ‡¹ Italy": "it", "ğŸ‡¯ğŸ‡µ Japan": "ja", "ğŸ‡°ğŸ‡· South Korea": "ko", "ğŸ‡¸ğŸ‡ª Sweden": "sv", "ğŸ‡·ğŸ‡´ Romania": "ro", "ğŸ‡»ğŸ‡³ Vietnam": "vi", "ğŸ‡ºğŸ‡¦ Ukraine": "uk", "ğŸ‡¨ğŸ‡³ China": "zh-CN", "ğŸ‡±ğŸ‡¹ Lithuania": 'lt', "ğŸ‡·ğŸ‡º Russia": "ru", "ğŸ‡­ğŸ‡· Croatia": "hr", "ğŸ‡§ğŸ‡¾ Belarus": "be", "ğŸ‡ªğŸ‡ª Estonia": "ee", "ğŸ‡±ğŸ‡» Latvia": "lv", "ğŸ‡°ğŸ‡¿ Kazahstan": "kk", "ğŸ‡¬ğŸ‡· Greece": "el"  }
        user_language_choices[chat_id] = flag_to_lang[message.text]
        bot.reply_to(message, f"Language set to <b>{user_language_choices[chat_id]}</b>. Please send the text you want to translate.", parse_mode='HTML')
    elif chat_id in user_language_choices:
        try:
            # Translate the message to the selected language
            dest_lang = user_language_choices[chat_id]
            translated_text = translator.translate(message.text, dest=dest_lang).text
            bot.reply_to(message, translated_text)
        except Exception as e:
            bot.reply_to(message, "Error: Unable to translate the message.")

@bot.message_handler(func=lambda msg: True)
def echo_all(message):
    bot.reply_to(message, message.text)

bot.infinity_polling()
